apply plugin: "cpp"

// The cpp plugin is required so tahat the assemble task can be set to depend on the OS appropriate google test build task

//Determine OS 
//TODO: Add Windows support.
ext.osname = System.properties['os.name'].toLowerCase().toLowerCase()
ext.staticLibName = 'libgtest.a'

if (osname.contains('windows')) {
    print "Too close for missiles switching to guns."
} else if (osname.contains('mac') ) {
    print 'build for mac'
    ext.includes='darwin'
    ext.libName='osx/' + staticLibName
    ext.gtestTask = 'buildGoogleTestMac'
    // assemble.dependsOn buildGoogleTestMac
} else {
    print 'Building for linux.'
    ext.includes='linux'
    ext.libName='linux/'+ staticLibName
    ext.gtestTask = 'buildGoogleTest'
    // assemble.dependsOn buildGoogleTest
}


ext.jniHeadersTask = ':krypto-api:GenerateJniHeaders'
ext.jarTask = ':krypto-api:jar'
if( project.hasProperty('developmentMode') && project.developmentMode ) {
    ext.jniHeadersTask = ":krypto${jniHeadersTask}"
    ext.jarTask = ":krypto${jarTask}"
}

ext.depends = ["${jniHeadersTask}", "${gtestTask}" , "${jarTask}"]

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

task buildEmscripten(type: Exec) {
    commandLine './buildEmscripten.sh'
}

task buildGoogleTestMac(type: Exec) {
    commandLine './buildGoogleTestMac.sh'
}

task buildGoogleTest(type: Exec) {
    commandLine './buildGoogleTest.sh'
}

task copyBinariesToApi(type: Copy, dependsOn: 'krypto-lib:build') {
    from 'krypto-lib/build/binaries/mainSharedLibrary/'
    into 'krypto-api/src/main/resources/'
    include( '**/*.so', '**/*.dylib' )
}

task buildFullJar(dependsOn: depends ) << {
    // run build lib
    tasks.getByPath(':krypto-lib:build').execute()
    // move libs
    tasks.getByPath('copyBinariesToApi').execute()
    // run jar api
    tasks.getByPath(':krypto-api:jar').execute()
}

build.dependsOn buildFullJar

assemble.finalizedBy {
    buildEmscripten
}
