//Easy semantic version based off describe + tags
def getVersionName = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags', '--dirty', '--long'
    standardOutput = stdout
  }
  def tagVer = stdout.toString().trim()
  def semVer = (tagVer =~ /v?([\d\.]+)/)[0][1]

  if (tagVer.contains('dev')) {
    semVer += "-SNAPSHOT"
  }
  return semVer
}

description = "Kryptnostic JNI Client"
group = "com.kryptnostic"
version = getVersionName()

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply from: "https://raw.githubusercontent.com/kryptnostic/gradles/master/kryptnostic.gradle"

sourceCompatibility=JavaVersion.VERSION_1_7
targetCompatibility=JavaVersion.VERSION_1_7

//ext.kryptoCentosUrl = 'http://bamboo.krypt.int/artifact/KRYP-KRYPTO/shared/build-latestSuccessful/CentOS-shared-lib/krypto-lib/build/libs/main/shared/libmain.so'
ext.staticLibDirectory = '/src/main/resources'

task getAllStaticLibs(description: 'Download any versions of the c++ crypto library that arent built as part of this build') << {
  if ( System.getenv("bamboo_SONATYPE_USERNAME") != null ) {
    // if building on bamboo, don't need to download the centos library
    return
  }

  new ByteArrayOutputStream().withStream { os ->
    def result = exec {
      commandLine 'pwd'
      standardOutput os
    }
    ext.currentDir = os.toString().trim()
  }

  //exec {
  //  commandLine 'wget', '-N', '-P', "${currentDir}${staticLibDirectory}", "${kryptoCentosUrl}"
  //}

  //exec {
  //  commandLine 'chmod', '+x', "${currentDir}${staticLibDirectory}/libmain.so"
  //}
}

task GenerateJniHeaders(description: 'Generate the JNI headers for kryptnostic engine', dependsOn: 'classes') << {
    ext.cp = sourceSets.main.output.classesDir
    ext.resourcesOut = "../krypto-lib/src/main/cpp/"
    //sourceSets.main.output.resourcesDir
    ext.cl = "com.kryptnostic.krypto.engine.KryptnosticEngine"
    exec {
        commandLine "javah", "-jni", "-d", "${resourcesOut}", "-classpath", "${cp}", "${cl}"
    }
}

if ( project.hasProperty('developmentMode') && project.developmentMode ) {
  jar.dependsOn(':krypto:copyBinariesToApi')
  jar.dependsOn('getAllStaticLibs')
} else {
  jar.dependsOn(':copyBinariesToApi')
  jar.dependsOn('getAllStaticLibs')
}
clean.dependsOn('cleanKryptoLib')

dependencies {
  testCompile "junit:junit:4.12"
}

task cleanKryptoLib(type: Delete) {
  delete 'src/main/resources/libmain.dylib'
  delete 'src/main/resources/libmain.so'
}

test{
  jvmArgs '-Xss7M'
}
