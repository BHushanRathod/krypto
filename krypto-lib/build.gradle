apply plugin: "eclipse-cdt"
apply plugin: "cpp"
apply plugin: "google-test"

// group = "com.kryptnostic"
// version = 1.0

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

model {
	toolChains {
        clang(Clang) {
            eachPlatform {
            		cppCompiler.withArguments { args ->
            			args << "-std=c++1y"
            		}
            }
        }
    }
    flavors {
        debug
        release
        failing
    }
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x64"
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDir "libs/googleTest/1.7.0/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile =
                        file("libs/googleTest/1.7.0/lib/" +
                             findGoogleTestCoreLibForPlatform(targetPlatform))
                }
            }
        }
    }
    components {
        main(NativeLibrarySpec) {
         	targetPlatform "x86"
            binaries.withType(SharedLibraryBinarySpec) {
                // Define a preprocessor macro that only applies to shared libraries
                cppCompiler.define "DLL_EXPORT"
            }
        }
    }
}

tasks.withType(GenerateMetadataFileTask) {
	
}

// START SNIPPET configure-test-binary
binaries.withType(GoogleTestTestSuiteBinarySpec) {
    lib library: "googleTest", linkage: "static"
    lib library: "main", linkage: "static"

    if (flavor == flavors.failing) {
        cppCompiler.define "PLUS_BROKEN"
    }
}
// END SNIPPET configure-test-binary
// END SNIPPET complete-example

tasks.withType(RunTestExecutable) {
    args "--gtest_output=xml:test_detail.xml"
}

def findGoogleTestCoreLibForPlatform(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "vs2013/gtest.lib"
//        return "vs2013/gtest-core.lib"
//        return "cygwin/gtest-core.lib"
//        return "mingw/gtest-core.lib"
    } else if (platform.operatingSystem.macOsX) {
        return "osx/libgtest.a"
    } else {
        return "linux/libgtest.a"
    }
}